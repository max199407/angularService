"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * SonarTS
 * Copyright (C) 2017-2017 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
const tslint = require("tslint");
const ts = require("typescript");
const builder_1 = require("../symbols/builder");
const table_1 = require("../symbols/table");
const navigation_1 = require("../utils/navigation");
const lva_1 = require("../symbols/lva");
const cfg_1 = require("../cfg/cfg");
class Rule extends tslint.Rules.TypedRule {
    static formatMessage(deadIdentifier) {
        return `Introduce a new variable or use its initial value before reassigning "${deadIdentifier.getText()}".`;
    }
    applyWithProgram(sourceFile, program) {
        const symbols = builder_1.SymbolTableBuilder.build(sourceFile, program);
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions(), program, symbols));
    }
}
Rule.metadata = {
    ruleName: "no-ignored-initial-value",
    description: "Function parameters, caught exceptions and foreach variables' initial values should not be ignored",
    optionsDescription: "",
    options: null,
    rspecKey: "RSPEC-1226",
    type: "functionality",
    typescriptOnly: false,
};
exports.Rule = Rule;
class Walker extends tslint.ProgramAwareRuleWalker {
    constructor(sourceFile, options, program, symbols) {
        super(sourceFile, options, program);
        this.symbols = symbols;
        this.lva = new lva_1.LiveVariableAnalyzer(this.symbols);
    }
    visitNode(node) {
        if (navigation_1.is(node, ...navigation_1.FUNCTION_LIKE)) {
            const functionLike = node;
            const lvaReturn = this.lva.analyzeFunction(functionLike);
            this.check(functionLike.body, lvaReturn, ...functionLike.parameters);
        }
        else if (navigation_1.is(node, ts.SyntaxKind.CatchClause)) {
            const catchClause = node;
            const cfg = cfg_1.ControlFlowGraph.fromStatements(Array.from(catchClause.block.statements));
            if (!cfg)
                return;
            const lvaReturn = this.lva.analyze(catchClause.block, cfg);
            if (catchClause.variableDeclaration) {
                this.check(catchClause.block, lvaReturn, catchClause.variableDeclaration);
            }
        }
        else if (navigation_1.is(node, ts.SyntaxKind.ForInStatement, ts.SyntaxKind.ForOfStatement)) {
            const iterationStatement = node;
            const cfg = cfg_1.ControlFlowGraph.fromStatements([iterationStatement.statement]);
            if (!cfg)
                return;
            const lvaReturn = this.lva.analyze(iterationStatement, cfg);
            this.check(iterationStatement.statement, lvaReturn, iterationStatement.initializer);
        }
        super.visitNode(node);
    }
    check(root, lvaReturn, ...nodesToCheck) {
        if (!lvaReturn) {
            return;
        }
        const { cfg, blockAvailableReads } = lvaReturn;
        const symbolsLiveAtStart = blockAvailableReads.get(cfg.start);
        nodesToCheck.forEach(parameter => {
            navigation_1.descendants(parameter)
                .filter(descendant => navigation_1.is(descendant, ts.SyntaxKind.Identifier))
                .forEach(descendant => {
                const identifier = descendant;
                const symbol = this.getTypeChecker().getSymbolAtLocation(identifier);
                if (symbol &&
                    !symbolsLiveAtStart.has(symbol) &&
                    isVariableOrParameter(symbol) &&
                    this.onlyUsedLocallyToRoot(symbol, root) &&
                    this.symbols.allUsages(symbol).length > 1) {
                    this.addFailureAtNode(identifier, Rule.formatMessage(identifier));
                }
            });
        });
    }
    onlyUsedLocallyToRoot(symbol, root) {
        const boundaries = [
            ...navigation_1.FUNCTION_LIKE,
            ts.SyntaxKind.SourceFile,
            ts.SyntaxKind.ClassDeclaration,
            ts.SyntaxKind.ClassExpression,
        ];
        return this.symbols
            .allUsages(symbol)
            .every(usage => usage.is(table_1.UsageFlag.DECLARATION) || navigation_1.ancestorsChain(usage.node, ...boundaries).includes(root));
    }
}
function isVariableOrParameter(symbol) {
    return symbol.flags === ts.SymbolFlags.BlockScopedVariable || symbol.flags === ts.SymbolFlags.FunctionScopedVariable;
}
//# sourceMappingURL=noIgnoredInitialValueRule.js.map